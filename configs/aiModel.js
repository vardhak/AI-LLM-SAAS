const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

const generationConfig2 = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const courseOutlineAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate the study material for  galaxies  for exam and level of difficulty will be medium  with summery of course, List of chapters along with summery and emoji icon for each chapter, topic list in list in chapter, all in JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "courseTitle": "Galaxies: Formation, Evolution, and Diversity",\n  "courseSummary": "This course provides a comprehensive overview of galaxies, from their origins and formation to their diverse morphologies and active behaviors. We will explore the fundamental properties of galaxies, including their structure, stellar populations, and dark matter content. We will also delve into the processes that drive galaxy evolution, such as mergers, accretion, and feedback from supermassive black holes. The course aims to give students a solid understanding of the current state of knowledge in the field of extragalactic astronomy.",\n  "levelOfDifficulty": "Medium",\n  "chapters": [\n    {\n      "chapterNumber": 1,\n      "chapterTitle": "Introduction to Galaxies",\n      "emoji": "üåå",\n      "chapterSummary": "This chapter introduces the concept of galaxies as vast collections of stars, gas, dust, and dark matter. It covers the historical perspective of galaxy discovery, the different galaxy types, and key observational techniques used to study them.",\n       "topics": [\n          "What is a galaxy?",\n          "Historical perspective: From nebulae to galaxies",\n          "Hubble sequence: Elliptical, Spiral, and Irregular galaxies",\n          "Basic galaxy components: Bulge, Disk, Halo",\n          "Observational techniques in extragalactic astronomy",\n          "Distance measurements to galaxies"\n        ]\n    },\n    {\n      "chapterNumber": 2,\n      "chapterTitle": "Galaxy Structure and Morphology",\n      "emoji": "üåÄ",\n       "chapterSummary": "This chapter explores the detailed structure and morphology of different galaxy types, focusing on the characteristics that distinguish them. It delves into the physical properties of each component, like the bulge, disk, and halo, and their relations to galaxy evolution.",\n        "topics": [\n          "Elliptical galaxies: Properties and formation",\n          "Spiral galaxies: Arms, bulges, and disks",\n          "Barred spiral galaxies",\n           "Lenticular galaxies",\n          "Irregular galaxies: Characteristics and causes",\n          "Galaxy scaling relations (Tully-Fisher, Faber-Jackson)"\n        ]\n    },\n    {\n      "chapterNumber": 3,\n      "chapterTitle": "Stellar Populations in Galaxies",\n      "emoji": "üåü",\n      "chapterSummary": "This chapter focuses on the stellar populations within galaxies, discussing their ages, metallicities, and how they contribute to a galaxy\'s overall properties. It explores how stellar evolution helps trace galactic evolution.",\n      "topics":[\n          "Stellar populations: Population I, II, III",\n          "Color-magnitude diagrams for galaxies",\n          "Metallicity and chemical evolution in galaxies",\n          "Star formation history of galaxies",\n          "Stellar feedback and galaxy evolution"\n      ]\n    },\n    {\n      "chapterNumber": 4,\n      "chapterTitle": "Dark Matter and Galaxy Formation",\n      "emoji": "‚ö´",\n      "chapterSummary": "This chapter covers the crucial role of dark matter in galaxy formation and evolution. It explores the evidence for dark matter, its properties, and how it shapes the distribution of galaxies in the universe.",\n        "topics": [\n          "Evidence for dark matter in galaxies",\n           "Dark matter halos and their properties",\n           "The role of dark matter in galaxy formation",\n           "Hierarchical structure formation",\n           "The Lambda-CDM model of cosmology"\n         ]\n    },\n    {\n      "chapterNumber": 5,\n      "chapterTitle": "Galaxy Evolution and Active Galactic Nuclei",\n      "emoji": "üí•",\n      "chapterSummary": "This chapter explores the processes that drive galaxy evolution, including mergers, interactions, and the influence of active galactic nuclei (AGN). It discusses how these processes shape the properties of galaxies over time.",\n       "topics": [\n          "Galaxy mergers and interactions",\n          "Environmental effects on galaxy evolution",\n          "Active galactic nuclei (AGN): Quasars, Seyferts, Radio Galaxies",\n           "Supermassive black holes in galaxies",\n          "AGN feedback on galaxy evolution",\n           "Galaxy evolution across cosmic time"\n        ]\n    },\n     {\n      "chapterNumber": 6,\n      "chapterTitle": "The Local Group and Galaxy Clusters",\n      "emoji": "üèòÔ∏è",\n      "chapterSummary":"This chapter zooms out to explore the environment in which galaxies reside, covering the Local Group (our immediate neighborhood) and larger structures like galaxy clusters, focusing on their properties and influence on galaxy evolution",\n         "topics": [\n          "The Local Group: Our galactic neighborhood",\n          "Properties of galaxy clusters",\n          "Intracluster medium (ICM) and its impact",\n          "Environmental effects on galaxies in clusters",\n          "Large-scale structure of the universe"\n       ]\n     }\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

export const notesGenAiModel2 = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate a detailed content or information on each of the topic in provided topic list, give some examples or formulas or any additional data if needed provide in clean json format  data only as(topics:[{topicTitle:"title",data:"data"}]) and don\'t add any specail symbols or \\n or any thing messy just provide clean text, use data -- [\n        "What is Space?",\n        "The Big Bang Theory",\n        "Evidence for the Big Bang (cosmic microwave background, redshift)",\n        "Expansion of the Universe",\n        "Formation of Galaxies and Galaxy Clusters",\n        "Dark Matter and Dark Energy"\n      ]',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "topics": [\n    {\n      "topicTitle": "What is Space?",\n      "data": "Space is the boundless three-dimensional extent in which objects and events have relative position and direction. It\'s the arena where all physical phenomena occur.  It\'s not just an empty void; it also includes the various fields and forces that permeate it, such as gravitational and electromagnetic fields. In a cosmological sense, space is often considered together with time, forming a four-dimensional continuum known as spacetime."\n    },\n    {\n      "topicTitle": "The Big Bang Theory",\n      "data": "The Big Bang theory is the prevailing cosmological model for the universe. It describes the universe as having originated from an extremely hot, dense state approximately 13.8 billion years ago. From this initial state, the universe has been expanding and cooling. It does not describe an explosion into pre-existing space but rather the expansion of space itself. The Big Bang theory is supported by a wealth of observational evidence.  It doesn\'t explain the initial singularity, just the evolution after it."\n    },\n    {\n      "topicTitle": "Evidence for the Big Bang (cosmic microwave background, redshift)",\n      "data": "Key evidence for the Big Bang includes: 1) Cosmic Microwave Background (CMB): This is the afterglow of the Big Bang, a faint radiation permeating the universe. It\'s remarkably uniform with small temperature fluctuations which correspond to variations in the early universe\'s density. 2) Redshift: The light from distant galaxies is shifted towards the red end of the electromagnetic spectrum. This redshift is interpreted as the galaxies moving away from us, with the speed increasing with distance.  Doppler effect causing this shift is calculated using formula: z = (Œªobserved - Œªemitted) / Œªemitted, where z is redshift, Œªobserved is observed wavelength and Œªemitted is emitted wavelength."\n    },\n     {\n      "topicTitle": "Expansion of the Universe",\n      "data": "The expansion of the universe is the observation that galaxies are moving away from each other. This expansion is not like an explosion, but rather a stretching of spacetime itself.  This is described by Hubble\'s Law: v = H‚ÇÄd, where v is the recession velocity of a galaxy, d is its distance, and H‚ÇÄ is the Hubble constant (a measure of the expansion rate).  The expansion is not uniform; regions of higher density (like galaxies) are more gravitationally bound and expand less than the empty space between them."\n     },\n      {\n      "topicTitle": "Formation of Galaxies and Galaxy Clusters",\n      "data": "Galaxies form from small fluctuations in the density of the early universe.  Gravity causes these denser regions to collapse, attracting more matter and eventually forming stars, planets and galaxies.  Galaxies then group together due to gravity to form galaxy clusters, which are the largest gravitationally bound structures in the universe.  This process involves a complex interplay of gravitational forces, dark matter halos, and gas dynamics. Galaxy types (spiral, elliptical, irregular) arise from varying formation conditions and interactions."\n     },\n     {\n      "topicTitle": "Dark Matter and Dark Energy",\n      "data":"Dark Matter is a mysterious substance that does not interact with light and therefore cannot be observed directly.  It is inferred from its gravitational effects on visible matter such as galaxies rotation curves and gravitational lensing.  Dark Energy is an even more mysterious force that is causing the accelerating expansion of the universe. Its nature is unknown and its effects are observed through the expansion rate of space.  Current theories suggest dark matter makes up about 27% of the universe while dark energy makes up about 68%, the rest is normal matter."\n     }\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

export const notesGenAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate exam material detail content for each chapter, Make sure to include all topic point in the content, Make sure to give content in HTML format (do not add HTMLK, Head, Body, Title tag), the Chapters:{\n      "chapterNumber": 1,\n      "chapterTitle": "Advanced Concurrency and Synchronization",\n      "emoji": "üßµ",\n      "chapterSummary": "This chapter explores advanced concurrency control mechanisms, moving beyond basic locks and semaphores to cover complex synchronization problems, concurrent data structures, and transactional memory. It emphasizes the challenges of achieving both correctness and performance in concurrent systems.",\n      "topics": [\n        "Advanced locking techniques: Read-write locks, recursive locks",\n        "Condition variables and monitors",\n        "Concurrent data structures: Concurrent queues, hashmaps, trees",\n        "Transactional memory: Hardware and software implementations",\n        "Lock-free and wait-free algorithms",\n        "Performance analysis of concurrent systems",\n        "Deadlock prevention and detection algorithms"\n      ]\n    }',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n    <div class="chapter">\n        <h2> Chapter 1: Advanced Concurrency and Synchronization üßµ</h2>\n        <p class="chapter-summary">This chapter explores advanced concurrency control mechanisms, moving beyond basic locks and semaphores to cover complex synchronization problems, concurrent data structures, and transactional memory. It emphasizes the challenges of achieving both correctness and performance in concurrent systems.</p>\n\n        <div class="topic">\n            <h3>Advanced locking techniques: Read-write locks, recursive locks</h3>\n            <p><strong>Read-Write Locks:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong> Allows multiple readers to access a shared resource concurrently but only allows one writer at a time.</li>\n                <li><strong>Use Cases:</strong> Suitable when reads are more frequent than writes.</li>\n                <li><strong>Implementation:</strong>  Typically involves two locks (or a state variable) to track readers and writers.</li>\n                <li><strong>Potential Issues:</strong>  Starvation of writers if readers are always present; may require fairness mechanisms.</li>\n\t\t\t\t<li><strong>Exam Specifics:</strong> Be able to explain scenarios where read-write locks are better than exclusive locks, and implement a basic read-write lock using mutexes or semaphores.</li>\n            </ul>\n\n             <p><strong>Recursive Locks (Reentrant Locks):</strong></p>\n            <ul>\n                <li><strong>Concept:</strong>  Allows a single thread to acquire the same lock multiple times without deadlocking, as long as it releases it the same number of times.</li>\n                <li><strong>Use Cases:</strong>  Common in recursive functions or when a method within a critical section needs to call another method that also requires the same lock.</li>\n                <li><strong>Implementation:</strong> Typically maintains a counter of how many times a thread has acquired the lock.</li>\n\t\t\t\t<li><strong>Exam Specifics:</strong> Understand how recursive locks prevent deadlocks in recursive function calls, and be able to show scenarios where their usage is important.</li>\n\n            </ul>\n        </div>\n\n        <div class="topic">\n            <h3>Condition variables and monitors</h3>\n            <p><strong>Condition Variables:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong> Used in conjunction with locks to allow threads to wait for a specific condition to become true before proceeding.</li>\n                <li><strong>Operations:</strong>\n                    <ul>\n                        <li><code>wait()</code>: Atomically releases the lock and puts the thread to sleep.</li>\n                        <li><code>signal()</code>:  Wakes up one waiting thread.</li>\n                        <li><code>broadcast()</code>:  Wakes up all waiting threads.</li>\n                    </ul>\n                </li>\n                <li><strong>Usage:</strong> Typically used in a loop to ensure the condition is met after waking up.</li>\n                <li><strong>Exam Specifics:</strong> Be able to describe how condition variables enable threads to synchronize based on specific conditions; provide code snippets using condition variables for producers and consumers.\n                 </li>\n            </ul>\n\n            <p><strong>Monitors:</strong></p>\n            <ul>\n                 <li><strong>Concept:</strong>  A high-level synchronization construct that encapsulates shared data and the operations that access it.</li>\n                 <li><strong>Key Components:</strong>  A mutex (for mutual exclusion) and condition variables (for synchronization).</li>\n                 <li><strong>Usage:</strong> Provides a structured way to ensure that shared data is only accessed through its monitor methods.</li>\n                 <li><strong>Exam Specifics:</strong> Define the properties of a monitor; relate them to encapsulation of data and synchronization mechanisms; compare with using raw locks and condition variables.\n                 </li>\n            </ul>\n        </div>\n\n       <div class="topic">\n            <h3>Concurrent data structures: Concurrent queues, hashmaps, trees</h3>\n            <p><strong>Concurrent Queues:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong> A queue data structure that supports concurrent enqueue and dequeue operations.</li>\n                <li><strong>Implementation:</strong>  Typically involves the use of locks, atomic operations, or lock-free algorithms.</li>\n\t\t\t\t<li><strong>Examples:</strong>  Using lock-based or lock-free implementation.</li>\n                <li><strong>Exam Specifics:</strong> Understand the challenges of implementing a concurrent queue; compare different implementation strategies (locks vs lock-free); be able to identify cases when it is necessary to use.\n                </li>\n            </ul>\n\n            <p><strong>Concurrent Hashmaps:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong> A hashmap data structure that allows concurrent read and write operations with minimal contention.</li>\n                 <li><strong>Implementation:</strong> Techniques include lock striping, segment locking, or lock-free approaches.</li>\n\t\t\t\t<li><strong>Examples:</strong>  Using lock striping or finer-grained locking strategies.</li>\n                 <li><strong>Exam Specifics:</strong> Be able to explain techniques for implementing a concurrent hashmap, explain the trade-offs of performance and complexity in various concurrent hash map strategies, and explain when is beneficial to use.\n                  </li>\n            </ul>\n\n            <p><strong>Concurrent Trees:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong> Tree data structures that support concurrent operations such as insert, delete, and search.</li>\n                 <li><strong>Implementation:</strong>  Often requires careful synchronization to maintain tree structure and data consistency, utilizing techniques like lock coupling or optimistic concurrency control.</li>\n\t\t\t\t <li><strong>Examples:</strong>  Balanced binary search trees or B-trees.</li>\n                 <li><strong>Exam Specifics:</strong> Describe the challenges of concurrent tree operations, discuss concurrent modifications in balanced trees, and compare with linear data structures in concurrency management.\n                  </li>\n            </ul>\n        </div>\n\n        <div class="topic">\n            <h3>Transactional memory: Hardware and software implementations</h3>\n            <p><strong>Transactional Memory:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong>  A model that allows a group of operations on shared memory to execute atomically, similar to database transactions.</li>\n                <li><strong>Hardware Transactional Memory (HTM):</strong>\n                    <ul>\n                        <li>Utilizes hardware support (CPU extensions) to provide atomic execution.</li>\n                        <li>Faster execution when transactions succeed.</li>\n                        <li>Limited transaction size and may abort on conflicts.</li>\n\t\t\t\t\t\t<li><strong>Exam Specifics:</strong> Describe basic concepts of HTM, typical hardware operation (e.g., transactional cache), and limitations, advantages of Hardware transactional memory.\n                        </li>\n                    </ul>\n                </li>\n                <li><strong>Software Transactional Memory (STM):</strong>\n                    <ul>\n                         <li>Implements transactional behavior using software techniques.</li>\n                        <li>More flexible but generally slower than HTM.</li>\n                        <li>May involve versioning, locking, or optimistic concurrency control.</li>\n\t\t\t\t\t\t<li><strong>Exam Specifics:</strong> Describe basic concepts of STM, various techniques (e.g., versioning, optimistic locking) used in software transactional memory and the trade-off involved.\n                        </li>\n                    </ul>\n                </li>\n\t\t\t\t<li><strong>Exam Specifics:</strong> Understand the trade-offs between Hardware and Software Transactional Memory, give examples on when to use one over another.</li>\n            </ul>\n\n        </div>\n\n        <div class="topic">\n           <h3>Lock-free and wait-free algorithms</h3>\n            <p><strong>Lock-Free Algorithms:</strong></p>\n             <ul>\n                <li><strong>Concept:</strong> Ensures that at least one thread makes progress in the system, even if other threads are delayed or suspended.</li>\n                <li><strong>Implementation:</strong>  Uses atomic operations, such as compare-and-swap (CAS) and fetch-and-add.</li>\n\t\t\t\t<li><strong>Guarantees:</strong> Progress.</li>\n\t\t\t\t<li><strong>Exam Specifics:</strong> Define lock-free programming; be able to describe common atomic operations (e.g., CAS) and their role, give examples of lock-free data structures (e.g., linked lists).\n                </li>\n\n            </ul>\n\n            <p><strong>Wait-Free Algorithms:</strong></p>\n            <ul>\n                <li><strong>Concept:</strong> Guarantees that every thread will make progress within a bounded number of steps, regardless of other thread\'s delays.</li>\n                 <li><strong>Implementation:</strong>  More complex than lock-free and often challenging to design correctly.</li>\n\t\t\t\t <li><strong>Guarantees:</strong> Progress and bounded waiting.</li>\n\t\t\t\t <li><strong>Exam Specifics:</strong> Define wait-free programming; provide a comparison between lock-free and wait-free algorithms, be able to explain the additional guarantees it offers and complexity added.\n                 </li>\n            </ul>\n        </div>\n\n        <div class="topic">\n            <h3>Performance analysis of concurrent systems</h3>\n             <ul>\n                <li><strong>Metrics:</strong>\n                    <ul>\n                        <li><strong>Throughput:</strong>  Rate at which tasks are completed.</li>\n                        <li><strong>Latency:</strong>  Time taken to complete a single task.</li>\n                        <li><strong>Scalability:</strong> How well performance scales with an increase in threads.</li>\n                        <li><strong>Overhead:</strong> The cost of synchronization and context switching.</li>\n                    </ul>\n                </li>\n\t\t\t\t<li><strong>Tools:</strong>  Performance monitoring tools, profilers, and benchmarking techniques.</li>\n\t\t\t\t<li><strong>Factors Affecting Performance:</strong>\n                    <ul>\n                        <li><strong>Lock contention:</strong> The degree to which threads compete for locks.</li>\n                        <li><strong>Cache coherence:</strong>  The performance of memory access when multiple cores are involved.</li>\n                        <li><strong>False sharing:</strong>  Unnecessary cache invalidations due to sharing of cache lines.</li>\n                        <li><strong>Context switching:</strong> The overhead of switching between threads.</li>\n                    </ul>\n\t\t\t\t</li>\n\t\t\t\t <li><strong>Exam Specifics:</strong> Describe common performance metrics (throughput, latency, scalability), identify common performance bottlenecks (lock contention, cache effects), and explain how to measure and analyze the performance of concurrent applications.\n                 </li>\n             </ul>\n        </div>\n\n        <div class="topic">\n             <h3>Deadlock prevention and detection algorithms</h3>\n             <p><strong>Deadlock Conditions:</strong></p>\n            <ul>\n                <li><strong>Mutual Exclusion:</strong> Resources are exclusively assigned to one process at a time.</li>\n                <li><strong>Hold and Wait:</strong> A process holds resources while waiting for others.</li>\n                <li><strong>No Preemption:</strong> Resources cannot be forcibly taken away.</li>\n                <li><strong>Circular Wait:</strong> A cycle of processes each waiting for the resource held by the next.</li>\n            </ul>\n             <p><strong>Deadlock Prevention:</strong></p>\n             <ul>\n                <li><strong>Techniques:</strong>  Eliminating one or more of the deadlock conditions:\n                    <ul>\n                       <li><strong>Eliminating mutual exclusion:</strong> Shared read only resources.</li>\n                        <li><strong>Eliminating Hold and wait:</strong> Request all resources at once, or release all resources when request for new resource.</li>\n                        <li><strong>Eliminating No preemption:</strong> Allow preemption of resources.</li>\n                        <li><strong>Eliminating circular wait:</strong> Impose a total ordering of resource types, so that processes request resources in order.</li>\n                    </ul>\n                </li>\n\t\t\t\t<li><strong>Exam Specifics:</strong> Discuss various techniques for deadlock prevention, and explain advantages and disadvantages of each.</li>\n            </ul>\n            <p><strong>Deadlock Detection:</strong></p>\n            <ul>\n                <li><strong>Techniques:</strong> Using resource allocation graphs to detect cycles.</li>\n                <li><strong>Recovery:</strong>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><strong>Process termination:</strong> Terminate one or more processes involved in a deadlock.</li>\n\t\t\t\t\t\t<li><strong>Resource preemption:</strong> Forcefully take resources from deadlocked process.</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</li>\n\t\t\t\t<li><strong>Exam Specifics:</strong> Explain how resource allocation graphs are used for detecting deadlocks, describe different approaches to deadlock recovery, explain the trade-off of the performance and complexity of prevention and detection algorithms.\n                 </li>\n            </ul>\n        </div>\n    </div>\n```\n',
        },
      ],
    },
  ],
});

export const notesGenAiModel3 = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate exam material detail content for each chapter, Make sure to include all topic point in the content, Make sure to give content in HTML format (do not add HTMLK, Head, Body, Title tag), provide it well styled more like a chatgpt like well structured output use tables or lists and any components to make it so astetic make titles bigger then subtitles slightly smaller and  make use of all red green blue yellow colors for text bold fonts and also try to make boxeses ofdifferent colors having lighter shadows which will be more beautifull just make sure that it must look the great html you can also provide examples or formulas or tables if required and  make sure to make all of it complete responsive on any device like mobile or tab or large screen and make sure provide a more in detail and more humanized information dont add any images the Chapters:\n      "chapterNumber": 1,\n      "chapterTitle": "Relational Database Theory and Design",\n      "emoji": "üßÆ",\n      "chapterSummary": "This chapter delves deep into the theoretical underpinnings of relational databases, including relational algebra, tuple calculus, and advanced normalization techniques. It also covers database design principles, focusing on schema refinement and dependency theory.",\n      "topics": [\n        "Relational Algebra: Operators and equivalences",\n        "Tuple Relational Calculus and Domain Relational Calculus",\n        "Functional Dependencies and Armstrong\'s Axioms",\n        "Normal Forms: 1NF, 2NF, 3NF, BCNF, 4NF, 5NF",\n        "Lossless decomposition and dependency preservation",\n        "Advanced Schema Refinement techniques",\n        "Database Design Methodologies and Case Studies"\n      ]\n   ',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n <style>\n    .container {\n        width: 95%;\n        max-width: 1200px;\n        margin: 20px auto;\n        font-family: sans-serif;\n    }\n\n    h1 {\n       color: #007bff;\n        font-size: 2.5em;\n        margin-bottom: 20px;\n        text-align: center;\n        border-bottom: 2px solid rgba(0, 123, 255, 0.3);\n        padding-bottom: 10px;\n    }\n\n    h2 {\n        color: #28a745;\n        font-size: 1.8em;\n        margin-top: 30px;\n        margin-bottom: 15px;\n    }\n  h3 {\n        color: #dc3545;\n        font-size: 1.4em;\n        margin-top: 20px;\n        margin-bottom: 10px;\n    }\n\n\n    .topic-box {\n         background-color: #f0f8ff; /* light background */\n        border: 1px solid #e1e1e1;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n        box-shadow: 3px 3px 10px rgba(0,0,0,0.1);\n        transition: transform 0.3s ease-in-out;\n    }\n\n    .topic-box:hover {\n         transform: translateY(-5px);\n    }\n\n      .topic-box-yellow {\n        background-color: #fffacd;\n        border: 1px solid #eee;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n         box-shadow: 3px 3px 10px rgba(0,0,0,0.1);\n           transition: transform 0.3s ease-in-out;\n    }\n    .topic-box-yellow:hover{\n        transform: translateY(-5px);\n\n    }\n\n\n    ul {\n        list-style-type: disc;\n        padding-left: 30px;\n        margin-bottom: 15px;\n    }\n\n    li {\n        margin-bottom: 8px;\n    }\n\n      table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-bottom: 20px;\n    }\n\n    th, td {\n        border: 1px solid #ddd;\n        padding: 8px;\n        text-align: left;\n    }\n\n    th {\n       background-color: #007bff;\n        color: white;\n    }\n      .formula {\n        font-family: monospace;\n        color: #007bff; /* Darker blue for formulas */\n        margin: 10px 0;\n        background-color: #e0f7fa;\n        padding: 10px;\n        border-radius: 5px;\n        overflow-x: auto;\n    }\n  .example {\n         background-color: #ffebee; /* light red for examples */\n         border: 1px solid #eee;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n        box-shadow: 3px 3px 10px rgba(0,0,0,0.1);\n          transition: transform 0.3s ease-in-out;\n    }\n     .example:hover{\n            transform: translateY(-5px);\n\n    }\n\n\n    @media (max-width: 768px) {\n      .container {\n            width: 98%;\n        }\n\n        h1 {\n          font-size: 2em;\n        }\n      h2 {\n          font-size: 1.5em;\n      }\n      h3{\n        font-size: 1.2em;\n      }\n        .topic-box, .topic-box-yellow, .example {\n            padding: 15px;\n          margin-bottom: 15px;\n        }\n         table {\n            font-size: 0.9em;\n        }\n    }\n</style>\n<div class="container">\n   <h1> <span style="font-size:1.5em">üßÆ</span> Relational Database Theory and Design</h1>\n    <div class="topic-box">\n         <h2> Chapter Summary</h2>\n        <p> This chapter delves deep into the theoretical underpinnings of relational databases, including relational algebra, tuple calculus, and advanced normalization techniques. It also covers database design principles, focusing on schema refinement and dependency theory.</p>\n    </div>\n\n    <div class="topic-box">\n     <h2> Relational Algebra: Operators and Equivalences</h2>\n        <h3>Key Concepts:</h3>\n        <ul>\n            <li><span style="color:#007bff; font-weight:bold;">Selection (œÉ):</span> Filters tuples based on a condition.</li>\n             <li><span style="color:#007bff; font-weight:bold;">Projection (Œ†):</span> Selects specific attributes from a relation.</li>\n            <li><span style="color:#007bff; font-weight:bold;">Union (‚à™):</span> Combines tuples from two relations (must be union-compatible).</li>\n            <li><span style="color:#007bff; font-weight:bold;">Intersection (‚à©):</span> Returns tuples that exist in both relations.</li>\n             <li><span style="color:#007bff; font-weight:bold;">Difference (-):</span> Returns tuples that exist in the first relation but not the second.</li>\n            <li><span style="color:#007bff; font-weight:bold;">Cartesian Product (√ó):</span> Combines every tuple from one relation with every tuple from another.</li>\n            <li><span style="color:#007bff; font-weight:bold;">Join (‚ãà):</span> Combines tuples from two relations based on a join condition.\n               <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Natural Join:</span> Combines based on matching attributes.</li>\n                <li><span style="color:#007bff; font-weight:bold;">Theta Join:</span> Uses a specific comparison operator.</li>\n               </ul>\n            </li>\n            <li><span style="color:#007bff; font-weight:bold;">Division (√∑):</span> Returns tuples that are related to all tuples in another relation.</li>\n             <li><span style="color:#007bff; font-weight:bold;">Renaming (œÅ):</span> Changes the name of a relation or attribute.</li>\n        </ul>\n         <h3>Equivalences:</h3>\n           <ul>\n            <li>  Selection and projection orders can often be switched (when conditions are independent). </li>\n             <li> Joins and Cartesian products have associativity and commutativity properties.</li>\n\n          </ul>\n\n          <div class="example">\n             <h4>Example</h4>\n               <p>Let\'s say we have two relations: <code>Customers(CustomerID, Name, City)</code> and <code>Orders(OrderID, CustomerID, Product, Quantity)</code></p>\n               <p>A Relational Algebra expression to find the names of all customers who have ordered product \'Laptop\' might be :</p>\n               <p>\n               <code>Œ†<sub>Name</sub>(Customers ‚ãà (œÉ<sub>Product = \'Laptop\'</sub>(Orders))) </code></p>\n\n          </div>\n\n    </div>\n\n    <div class="topic-box-yellow">\n    <h2> Tuple Relational Calculus and Domain Relational Calculus</h2>\n       <h3>Tuple Relational Calculus:</h3>\n       <ul>\n        <li> <span style="color:#007bff; font-weight:bold;">Focus:</span> Variables represent tuples from relations.</li>\n         <li><span style="color:#007bff; font-weight:bold;">Syntax:</span> {t | P(t)} - where \'t\' is a tuple variable, and \'P(t)\' is a formula involving tuples.</li>\n         <li><span style="color:#007bff; font-weight:bold;">Quantifiers:</span> Existential (‚àÉ) and Universal (‚àÄ) quantifiers are used to specify conditions over tuples.</li>\n       </ul>\n          <h3>Domain Relational Calculus:</h3>\n       <ul>\n        <li> <span style="color:#007bff; font-weight:bold;">Focus:</span> Variables represent domain values (attribute values).</li>\n         <li><span style="color:#007bff; font-weight:bold;">Syntax:</span> {<a1, a2, ...> | P(a1, a2, ...)} - where \'a1, a2,...\' are domain variables, and \'P\' is a formula involving domain values.</li>\n         <li><span style="color:#007bff; font-weight:bold;">Quantifiers:</span> Uses existential (‚àÉ) and universal (‚àÄ) quantifiers on domain values.</li>\n       </ul>\n         <h3>Comparison</h3>\n          <ul>\n              <li> <span style="color:#007bff; font-weight:bold;">Expressive Power:</span> Both are equally expressive and can specify any query that relational algebra can.</li>\n              <li> <span style="color:#007bff; font-weight:bold;">Abstraction Level:</span> Calculus is more declarative (what to retrieve), while algebra is more procedural (how to retrieve).</li>\n          </ul>\n      <div class="example">\n         <h4>Example: Tuple Relational Calculus</h4>\n          <p>The same query as above to find customer names for those who ordered \'Laptop\' using TRC:</p>\n        <p>\n          <code>{ t | ‚àÉo (Orders(o) ‚àß o.Product = \'Laptop\' ‚àß  ‚àÉc (Customers(c) ‚àß c.CustomerID = o.CustomerID ‚àß t.Name = c.Name))}</code>\n         </p>\n      </div>\n       <div class="example">\n         <h4>Example: Domain Relational Calculus</h4>\n         <p>The same query using DRC:</p>\n          <p>\n          <code>{ <cn> | ‚àÉci, ct, o, pr, q  (Customers(ci, cn, ct) ‚àß Orders(o, ci, pr, q) ‚àß pr = \'Laptop\' )}</code>\n           </p>\n      </div>\n    </div>\n\n\n <div class="topic-box">\n    <h2>Functional Dependencies and Armstrong\'s Axioms</h2>\n    <h3>Functional Dependencies (FD):</h3>\n     <ul>\n        <li><span style="color:#007bff; font-weight:bold;">Definition:</span>  A dependency X ‚Üí Y, where X and Y are sets of attributes, means that for any two tuples in a relation, if the X values match, then the Y values must also match.</li>\n         <li><span style="color:#007bff; font-weight:bold;">Notation:</span> X ‚Üí Y indicates that X functionally determines Y.</li>\n          <li><span style="color:#007bff; font-weight:bold;">Key Concepts:</span>\n              <ul>\n                  <li><span style="color:#007bff; font-weight:bold;">Determinant:</span>  The set of attributes on the left side of the arrow (X) is called the determinant.</li>\n                  <li><span style="color:#007bff; font-weight:bold;">Dependent:</span> The set of attributes on the right side of the arrow (Y) is called the dependent.</li>\n              </ul>\n          </li>\n     </ul>\n    <h3>Armstrong\'s Axioms:</h3>\n        <p> A set of inference rules used to reason about functional dependencies.</p>\n         <ul>\n            <li><span style="color:#007bff; font-weight:bold;">Reflexivity:</span> If Y ‚äÜ X, then X ‚Üí Y.</li>\n           <li><span style="color:#007bff; font-weight:bold;">Augmentation:</span> If X ‚Üí Y, then XZ ‚Üí YZ.</li>\n           <li><span style="color:#007bff; font-weight:bold;">Transitivity:</span> If X ‚Üí Y and Y ‚Üí Z, then X ‚Üí Z.</li>\n            <li><span style="color:#007bff; font-weight:bold;">Union:</span> If X ‚Üí Y and X ‚Üí Z, then X ‚Üí YZ.</li>\n            <li><span style="color:#007bff; font-weight:bold;">Decomposition:</span> If X ‚Üí YZ, then X ‚Üí Y and X ‚Üí Z.</li>\n           </ul>\n            <h3>Use Cases:</h3>\n        <ul>\n            <li><span style="color:#007bff; font-weight:bold;">FD Closure:</span>  Used to find all functional dependencies that hold in a relation using Armstrong\'s Axioms.</li>\n           <li><span style="color:#007bff; font-weight:bold;">Attribute Closure:</span> To find all attributes that are functionally determined by a given set of attributes.</li>\n\n         </ul>\n  <div class="example">\n       <h4>Example:</h4>\n        <p>If we have a relation with attributes R(A, B, C) and FDs: A ‚Üí B, and B ‚Üí C.\n         Using Transitivity, we can infer A ‚Üí C.\n        </p>\n   </div>\n</div>\n\n\n    <div class="topic-box-yellow">\n        <h2> Normal Forms: 1NF, 2NF, 3NF, BCNF, 4NF, 5NF</h2>\n         <h3>Normalization Overview:</h3>\n        <p> Process of organizing the columns (attributes) and tables (relations) of a database to minimize redundancy and data dependencies.</p>\n         <h3>Normal Forms:</h3>\n      <table>\n            <thead>\n                <tr>\n                    <th>Normal Form</th>\n                    <th>Definition</th>\n                    <th>Requirements</th>\n                    <th>Problem(s) Addressed</th>\n                </tr>\n            </thead>\n            <tbody>\n              <tr>\n                    <td><strong>1NF (First Normal Form)</strong></td>\n                    <td>All attributes must have atomic values (no multi-valued attributes).</td>\n                    <td>Eliminate repeating groups.</td>\n                    <td>Redundancy, Update anomalies.</td>\n                </tr>\n                <tr>\n                    <td><strong>2NF (Second Normal Form)</strong></td>\n                    <td>It is in 1NF, and all non-key attributes must be fully functionally dependent on the entire primary key.</td>\n                    <td>Must be in 1NF.\n                    No partial dependencies.</td>\n                     <td>Redundancy, Insert and Update anomalies.</td>\n                </tr>\n                 <tr>\n                    <td><strong>3NF (Third Normal Form)</strong></td>\n                    <td>It is in 2NF, and no non-key attribute should be transitively dependent on the primary key.</td>\n                     <td>Must be in 2NF.\n                     No transitive dependencies.</td>\n                     <td>Redundancy, Update anomalies.</td>\n                </tr>\n                 <tr>\n                    <td><strong>BCNF (Boyce-Codd Normal Form)</strong></td>\n                    <td>For each dependency X ‚Üí Y, X must be a superkey. A stricter version of 3NF.</td>\n                     <td>Must be in 3NF.\n                     Every determinant must be a superkey.</td>\n                      <td>Certain update anomalies not eliminated by 3NF.</td>\n                </tr>\n                   <tr>\n                    <td><strong>4NF (Fourth Normal Form)</strong></td>\n                      <td>It is in BCNF and has no multi-valued dependencies.</td>\n                    <td>Must be in BCNF.\n                    Eliminate multi-valued dependencies.</td>\n                    <td>Redundancy, Update anomalies due to multi-valued dependencies.</td>\n                </tr>\n                   <tr>\n                    <td><strong>5NF (Fifth Normal Form)</strong></td>\n                      <td>Eliminates join dependencies.</td>\n                    <td>Must be in 4NF.\n                        Eliminate join dependencies.</td>\n                     <td>Rare forms of redundancy.</td>\n                </tr>\n            </tbody>\n        </table>\n\n        <p style="margin-top:10px; color:gray"><strong>Note:</strong> Each normal form builds upon the previous, meaning if a relation satisfies a higher normal form, it satisfies all lower ones as well.</p>\n\n    </div>\n    <div class="topic-box">\n    <h2>Lossless Decomposition and Dependency Preservation</h2>\n        <h3>Decomposition:</h3>\n           <p>Breaking a relation into smaller relations to achieve better normal forms.</p>\n\n           <h3>Lossless Decomposition:</h3>\n           <ul>\n            <li><span style="color:#007bff; font-weight:bold;">Definition:</span> A decomposition of a relation R into R1, R2, ..., Rn is lossless if the natural join of the decomposed relations produces the original relation.</li>\n                <li><span style="color:#007bff; font-weight:bold;">Requirements:</span> To ensure no information is lost during decomposition.</li>\n               <li><span style="color:#007bff; font-weight:bold;">Test:</span>  The common attributes between two relations should form a superkey for at least one of the relations.</li>\n            </ul>\n         <h3>Dependency Preservation:</h3>\n            <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Definition:</span>  A decomposition is dependency-preserving if all the functional dependencies of the original relation are preserved in the decomposed relations (meaning there exists a way to derive the original FD set from all FD sets in decomposed relations.)</li>\n                 <li><span style="color:#007bff; font-weight:bold;">Purpose:</span> To ensure that constraints on the relation (FDS) can still be enforced in the decomposed relations.</li>\n                 <li><span style="color:#007bff; font-weight:bold;">Challenges:</span>  Achieving both lossless and dependency-preserving decomposition can be difficult for higher normal forms like BCNF.</li>\n            </ul>\n\n  <div class="example">\n           <h4>Example:</h4>\n        <p> A relation <code>R(A, B, C)</code> with dependency <code>A ‚Üí B</code></p>\n       <p>\n          A lossless decomposition might be: <code>R1(A,B)</code> and <code>R2(A,C)</code>\n       </p>\n       <p>\n          This would not fully preserve dependency because we can not derive it from <code>R1</code> and <code>R2</code> but its still lossless.\n        </p>\n   </div>\n\n</div>\n\n\n<div class="topic-box-yellow">\n        <h2> Advanced Schema Refinement Techniques</h2>\n       <h3>Techniques:</h3>\n         <ul>\n            <li><span style="color:#007bff; font-weight:bold;">Vertical Partitioning:</span> Dividing attributes of a single relation across multiple relations.\n            <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Use Case:</span> Improve performance by reducing the number of attributes accessed during specific queries.</li>\n                </ul>\n            </li>\n\n            <li><span style="color:#007bff; font-weight:bold;">Horizontal Partitioning:</span> Dividing tuples of a relation across multiple relations.\n               <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Use Case:</span>  Improve manageability and performance, particularly for large relations that can be divided logically.</li>\n                </ul>\n              </li>\n            <li><span style="color:#007bff; font-weight:bold;">Denormalization:</span> Adding redundancy to improve read performance at the cost of write performance.\n               <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Use Case:</span> When query performance is critical.</li>\n                </ul>\n            </li>\n\n             <li><span style="color:#007bff; font-weight:bold;">Indexing:</span> Creating an index on attributes to improve query performance.\n               <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Use Case:</span> Speed up data access, especially in large tables.</li>\n                </ul>\n             </li>\n\n             <li><span style="color:#007bff; font-weight:bold;">Clustering:</span> Physical storage of related data close together on disk.\n              <ul>\n                <li><span style="color:#007bff; font-weight:bold;">Use Case:</span> Optimize the retrieval of frequently joined tables.</li>\n                </ul>\n              </li>\n\n         </ul>\n     <h3> Considerations:</h3>\n           <ul>\n            <li>Performance analysis should be done before applying refinement. </li>\n            <li>Tradeoffs: Cost vs Benefit.</li>\n            <li>Maintainability can be impacted.</li>\n        </ul>\n\n    </div>\n  <div class="topic-box">\n        <h2>Database Design Methodologies and Case Studies</h2>\n      <h3>Design Methodologies:</h3>\n        <ul>\n          <li><span style="color:#007bff; font-weight:bold;">Conceptual Design:</span>\n           <ul>\n               <li>Defining high-level data requirements.</li>\n               <li>Creating Entity-Relationship (ER) diagrams.</li>\n               <li>Mapping entities to relationships.</li>\n           </ul>\n          </li>\n            <li><span style="color:#007bff; font-weight:bold;">Logical Design:</span>\n             <ul>\n                <li>Mapping the conceptual design to a logical schema.</li>\n                <li>Applying normalization.</li>\n                <li>Defining data types and constraints.</li>\n                </ul>\n             </li>\n             <li><span style="color:#007bff; font-weight:bold;">Physical Design:</span>\n                 <ul>\n                    <li>Implementation of physical storage.</li>\n                     <li>Designing indexes and clustering strategies.</li>\n                     <li>Addressing database-specific concerns.</li>\n                </ul>\n            </li>\n       </ul>\n    <h3>Case Studies:</h3>\n          <ul>\n             <li>Analyzing specific scenarios (e.g., library system, e-commerce site).</li>\n            <li>Implementing and testing database designs.</li>\n            <li>Addressing unique design challenges in real-world applications.</li>\n        </ul>\n\n    </div>\n\n</div>\n```\n',
        },
      ],
    },
  ],
});

export const notesGenAiModelFinal = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate exam material detail content for each chapter, Make sure to include all topic point in the content, Make sure to give content in HTML format (do not add HTMLK, Head, Body, Title tag), provide it well styled more like a chatgpt like well structured output use tables or lists and any components to make it so astetic make titles bigger then subtitles slightly smaller and  make use of all red green blue yellow colors for text bold fonts and also try to make boxeses ofdifferent colors having lighter shadows which will be more beautifull just make sure that it must look the great html you can also provide examples or formulas or tables if required and  make sure to make all of it complete responsive on any device like mobile or tab or large screen and make sure provide a more in detail and more humanized information dont add any images  ,the Chapters:\n      "chapterNumber": 1,\n      "chapterTitle": "Design Patterns: Principles and Practices",\n      "emoji": "üß©",\n      "chapterSummary": "This chapter provides an in-depth exploration of design patterns, focusing on creational, structural, and behavioral patterns. Students will learn how to identify and apply appropriate patterns to solve common design problems, enhancing code reusability and maintainability.",\n      "topics": [\n        "Introduction to Design Patterns: Intent, Motivation, Applicability",\n        "Creational Patterns: Singleton, Factory Method, Abstract Factory, Builder, Prototype",\n        "Structural Patterns: Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy",\n        "Behavioral Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, Visitor",\n        "Anti-patterns: Identifying and Avoiding Common Mistakes",\n        "Pattern Languages and Frameworks"\n      ]\n  \n     make the chapter title bigger its not working and return output as plain/text of HTML Code make sure the code is clean and work in browser use same key for all and do not add any extra column or key`;\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n <style>\n  /* General Styling */\n  body {\n   font-family: Arial, sans-serif;\n   line-height: 1.6;\n   margin: 0;\n   padding: 0;\n   background-color: #f4f4f4;\n  }\n\n  /* Responsive Design */\n  @media (max-width: 600px) {\n   .container {\n    width: 95%;\n   }\n\n   table {\n    width: 100%;\n   }\n\n   th,\n   td {\n    padding: 8px;\n    font-size: 14px;\n   }\n  }\n\n  .container {\n   width: 80%;\n   margin: 20px auto;\n   background-color: #fff;\n   padding: 20px;\n   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n   border-radius: 8px;\n  }\n\n  /* Chapter Title */\n  h1 {\n   font-size: 2.5em;\n   color: #333;\n   text-align: center;\n   margin-bottom: 20px;\n  }\n\n  /* Topic Titles */\n  h2 {\n   font-size: 1.8em;\n   color: #007BFF;\n   margin-top: 30px;\n   margin-bottom: 15px;\n   border-bottom: 2px solid #eee;\n   padding-bottom: 5px;\n  }\n\n  /* Subtopics */\n  h3 {\n   font-size: 1.4em;\n   color: #28A745;\n   margin-top: 20px;\n   margin-bottom: 10px;\n  }\n\n  /* Paragraphs */\n  p {\n   font-size: 1.1em;\n   color: #555;\n   margin-bottom: 15px;\n  }\n\n  /* Lists */\n  ul,\n  ol {\n   margin-bottom: 15px;\n  }\n\n  li {\n   font-size: 1.1em;\n   color: #555;\n   margin-bottom: 8px;\n  }\n\n  /* Code Snippets */\n  pre {\n   background-color: #f8f8f8;\n   border: 1px solid #ddd;\n   padding: 10px;\n   overflow-x: auto;\n   border-radius: 5px;\n  }\n\n  code {\n   font-family: monospace, monospace;\n   font-size: 1em;\n   color: #c7254e;\n   background-color: #f9f2f4;\n   border-radius: 4px;\n   padding: 2px 5px;\n  }\n\n  /* Tables */\n  table {\n   width: 100%;\n   border-collapse: collapse;\n   margin-bottom: 20px;\n  }\n\n  th,\n  td {\n   border: 1px solid #ddd;\n   padding: 12px;\n   text-align: left;\n  }\n\n  th {\n   background-color: #f0f0f0;\n   color: #333;\n  }\n\n  tr:nth-child(even) {\n   background-color: #f9f9f9;\n  }\n\n  /* Important Notes */\n  .note {\n   background-color: #fff3cd;\n   border: 1px solid #ffeeba;\n   color: #856404;\n   padding: 15px;\n   margin-bottom: 20px;\n   border-radius: 5px;\n  }\n\n  /* Boxes with Shadows */\n  .info-box {\n   background-color: #e7f5ff;\n   border: 1px solid #b8daff;\n   color: #0c5460;\n   padding: 15px;\n   margin-bottom: 20px;\n   border-radius: 5px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n\n  .warning-box {\n   background-color: #fff4e7;\n   border: 1px solid #ffe3c7;\n   color: #865d00;\n   padding: 15px;\n   margin-bottom: 20px;\n   border-radius: 5px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n\n  .success-box {\n   background-color: #e8f8f3;\n   border: 1px solid #c6eac9;\n   color: #155724;\n   padding: 15px;\n   margin-bottom: 20px;\n   border-radius: 5px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n\n  .danger-box {\n   background-color: #f8d7da;\n   border: 1px solid #f5c6cb;\n   color: #721c24;\n   padding: 15px;\n   margin-bottom: 20px;\n   border-radius: 5px;\n   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n  }\n </style>\n\n <div class="container">\n  <h1>Design Patterns: Principles and Practices üß©</h1>\n\n  <div class="info-box">\n   <p>This chapter provides an in-depth exploration of design patterns, focusing on creational, structural, and behavioral patterns. You will learn how to identify and apply appropriate patterns to solve common design problems, enhancing code reusability and maintainability.</p>\n  </div>\n\n  <h2>Introduction to Design Patterns: Intent, Motivation, Applicability</h2>\n  <p>\n   <strong style="color:blue;">Intent:</strong> Understand the core intent behind using design patterns ‚Äì to provide reusable solutions to recurring design problems.\n  </p>\n  <p>\n   <strong style="color:blue;">Motivation:</strong> Learn the motivations for using design patterns, such as improving code readability, maintainability, and flexibility.\n  </p>\n  <p>\n   <strong style="color:blue;">Applicability:</strong> Explore scenarios where design patterns are most applicable and beneficial. Understand when to use and when not to use design patterns.\n  </p>\n  <div class="success-box">\n   <p><strong>Example:</strong> Consider a scenario where you need to create different types of objects. Without a design pattern, you might end up with complex conditional logic. Design patterns like Factory Method can simplify this process.</p>\n  </div>\n\n  <h2>Creational Patterns: Singleton, Factory Method, Abstract Factory, Builder, Prototype</h2>\n  <p>\n   <strong style="color:green;">Singleton:</strong> Ensure a class has only one instance and provide a global point of access to it.\n  </p>\n  <ul>\n   <li>Implementation details and thread safety considerations.</li>\n   <li>Use cases: Logging, configuration management.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Factory Method:</strong> Define an interface for creating an object, but let subclasses decide which class to instantiate.\n  </p>\n  <ul>\n   <li>Parametrized factory methods, advantages of loose coupling.</li>\n   <li>Use cases: UI toolkit frameworks, database connection factories.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Abstract Factory:</strong> Provide an interface for creating families of related or dependent objects without specifying their concrete classes.\n  </p>\n  <ul>\n   <li>Creating product families, benefits of abstraction.</li>\n   <li>Use cases: Creating UI elements for different operating systems.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Builder:</strong> Separate the construction of a complex object from its representation so that the same construction process can create different representations.\n  </p>\n  <ul>\n   <li>Step-by-step object creation, handling complex object initialization.</li>\n   <li>Use cases: Creating complex documents, assembling computer configurations.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Prototype:</strong> Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.\n  </p>\n  <ul>\n   <li>Cloning objects, dynamic object creation.</li>\n   <li>Use cases: Creating game objects, copying configurations.</li>\n  </ul>\n  <div class="note">\n   <p><strong>Key Takeaway:</strong> Creational patterns abstract the instantiation process, making the system independent of how its objects are created, composed, and represented.</p>\n  </div>\n\n  <h2>Structural Patterns: Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy</h2>\n  <p>\n   <strong style="color:green;">Adapter:</strong> Convert the interface of a class into another interface clients expect.\n  </p>\n  <ul>\n   <li>Object and class adapters, resolving interface incompatibilities.</li>\n   <li>Use cases: Integrating legacy systems, using third-party libraries.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Bridge:</strong> Decouple an abstraction from its implementation so that the two can vary independently.\n  </p>\n  <ul>\n   <li>Implementation hierarchies, dynamic binding of implementations.</li>\n   <li>Use cases: Cross-platform development, database abstraction.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Composite:</strong> Compose objects into tree structures to represent part-whole hierarchies.\n  </p>\n  <ul>\n   <li>Recursive composition, uniform handling of composite and individual objects.</li>\n   <li>Use cases: UI component trees, organizational charts.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Decorator:</strong> Attach additional responsibilities to an object dynamically.\n  </p>\n  <ul>\n   <li>Wrapper classes, adding behavior without modifying the object.</li>\n   <li>Use cases: Adding borders to UI elements, encrypting data streams.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Facade:</strong> Provide a unified interface to a set of interfaces in a subsystem.\n  </p>\n  <ul>\n   <li>Simplifying complex subsystems, reducing dependencies.</li>\n   <li>Use cases: Compiler front-ends, API gateways.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Flyweight:</strong> Use sharing to support large numbers of fine-grained objects efficiently.\n  </p>\n  <ul>\n   <li>Intrinsic and extrinsic state, reducing memory footprint.</li>\n   <li>Use cases: Rendering large numbers of characters in a document, managing graphical elements.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Proxy:</strong> Provide a surrogate or placeholder for another object to control access to it.\n  </p>\n  <ul>\n   <li>Virtual, remote, and protection proxies, controlling object access.</li>\n   <li>Use cases: Lazy loading, remote procedure calls, access control.</li>\n  </ul>\n\n  <h2>Behavioral Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, Visitor</h2>\n  <p>\n   <strong style="color:green;">Chain of Responsibility:</strong> Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request.\n  </p>\n  <ul>\n   <li>Request handlers, dynamic handling of requests.</li>\n   <li>Use cases: Event handling, logging.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Command:</strong> Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.\n  </p>\n  <ul>\n   <li>Command objects, undo/redo functionality.</li>\n   <li>Use cases: Transaction processing, GUI actions.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Interpreter:</strong> Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.\n  </p>\n  <ul>\n   <li>Grammar representation, expression evaluation.</li>\n   <li>Use cases: Query languages, scripting engines.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Iterator:</strong> Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.\n  </p>\n  <ul>\n   <li>Traversal algorithms, abstracting data access.</li>\n   <li>Use cases: Collection iteration, database record traversal.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Mediator:</strong> Define an object that encapsulates how a set of objects interact.\n  </p>\n  <ul>\n   <li>Centralized control, reducing dependencies.</li>\n   <li>Use cases: Chat rooms, air traffic control systems.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Memento:</strong> Without violating encapsulation, capture and externalize an object\'s internal state so that the object can be restored to this state later.\n  </p>\n  <ul>\n   <li>State capture and restoration, implementing undo/redo.</li>\n   <li>Use cases: Game save states, document versioning.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Observer:</strong> Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n  </p>\n  <ul>\n   <li>Publish-subscribe pattern, event handling.</li>\n   <li>Use cases: UI updates, event-driven systems.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">State:</strong> Allow an object to alter its behavior when its internal state changes.\n  </p>\n  <ul>\n   <li>State transitions, dynamic behavior modification.</li>\n   <li>Use cases: TCP connection states, vending machine states.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Strategy:</strong> Define a family of algorithms, encapsulate each one, and make them interchangeable.\n  </p>\n  <ul>\n   <li>Algorithm selection, dynamic algorithm switching.</li>\n   <li>Use cases: Sorting algorithms, compression algorithms.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Template Method:</strong> Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.\n  </p>\n  <ul>\n   <li>Algorithm structure, code reuse.</li>\n   <li>Use cases: Report generation, workflow processes.</li>\n  </ul>\n  <p>\n   <strong style="color:green;">Visitor:</strong> Represent an operation to be performed on the elements of an object structure.\n  </p>\n  <ul>\n   <li>Adding operations, decoupling algorithms from object structures.</li>\n   <li>Use cases: Compiler analysis, data structure processing.</li>\n  </ul>\n\n  <h2>Anti-patterns: Identifying and Avoiding Common Mistakes</h2>\n  <p>\n   <strong style="color:red;">Anti-patterns:</strong> Recognize common design flaws that appear to be solutions but are ineffective and may result in negative consequences.\n  </p>\n  <ul>\n   <li><strong style="color:red;">God Class:</strong> A class that knows too much or does too much.</li>\n   <li><strong style="color:red;">Spaghetti Code:</strong> Code that is difficult to read and understand.</li>\n   <li><strong style="color:red;">Copy-Paste Programming:</strong> Duplicating code instead of using proper abstraction.</li>\n  </ul>\n  <div class="warning-box">\n   <p><strong>Warning:</strong> Avoiding anti-patterns is crucial for maintaining code quality and preventing long-term problems.</p>\n  </div>\n\n  <h2>Pattern Languages and Frameworks</h2>\n  <p>\n   <strong style="color:blue;">Pattern Languages:</strong> Understand how patterns are organized and documented within pattern languages to solve recurring problems in a specific domain.\n  </p>\n  <p>\n   <strong style="color:blue;">Frameworks:</strong> Explore the role of frameworks in providing a skeletal structure for applications, utilizing design patterns extensively to promote reusability and extensibility.\n  </p>\n  <div class="info-box">\n   <p><strong>Note:</strong> Frameworks are often built using a collection of design patterns to provide a robust and flexible architecture.</p>\n  </div>\n\n </div>\n ```\n',
        },
      ],
    },
  ],
});

export const notesGenAiModel4 = model.startChat({
  generationConfig2,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate exam material detail content for each chapter, Make sure to include all topic point in the content, Make sure to give content in HTML format (do not add HTMLK, Head, Body, Title tag), provide it well styled more like a chatgpt like well structured output use tables or lists and any components to make it so astetic make titles bigger then subtitles slightly smaller and  make use of all red green blue yellow colors for text bold fonts and also try to make boxeses ofdifferent colors having lighter shadows which will be more beautifull just make sure that it must look the great html you can also provide examples or formulas or tables if required and  make sure to make all of it complete responsive on any device like mobile or tab or large screen and make sure provide a more in detail and more humanized information dont add any images the Chapters :\n      "chapterNumber": 1,\n      "chapterTitle": "Naval Organization and Structure",\n      "emoji": "‚öì",\n      "chapterSummary": "This chapter introduces the basic organization and structure of the U.S. Navy, including its branches, commands, and key personnel. Understanding this structure is essential for navigating the Navy and understanding your role within it.",\n      "topics": [\n        "Chain of Command",\n        "Naval Branches (Surface Warfare, Submarine Warfare, Aviation, etc.)",\n        "Major Naval Commands (e.g., Fleet Forces Command, Naval Sea Systems Command)",\n        "Officer vs. Enlisted Ranks",\n        "Naval Bases and Installations"\n      ]\n    ,return output as plain/text as clean html code use same key for all and do not add any extra column or key',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n<div class="chapter-container">\n    <h1 style="color: #007BFF;">\n        <span style="font-size: 1.5em;">‚öì</span> Chapter 1: Naval Organization and Structure\n    </h1>\n    <p style="font-size: 1.1em; color: #6c757d;">Understanding the U.S. Navy\'s organization is crucial for navigating your role and responsibilities. This chapter breaks down the structure, branches, commands, and personnel.</p>\n\n    <div class="topic-section">\n        <h2 style="color: #28a745;">Chain of Command</h2>\n        <div class="topic-content">\n            <p>The Chain of Command is the hierarchical structure of authority and responsibility within the Navy. It ensures clear lines of communication and accountability.</p>\n\n            <div class="example-box" style="background-color: rgba(255, 235, 59, 0.1); border: 1px solid rgba(255, 235, 59, 0.3); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">\n                <p style="color: #ffc107;"><strong>Example:</strong> A sailor reports to their immediate supervisor, who reports to their division officer, and so on, up to the Commanding Officer (CO) and beyond. This is designed for clarity and efficiency in decision-making and execution.</p>\n            </div>\n\n            <ul style="list-style-type: disc; margin-left: 20px;">\n                <li><strong>Key Aspects:</strong> Clearly defined roles, accountability, and efficient communication flow.</li>\n                <li><strong>Important Personnel:</strong> Commanding Officer (CO), Executive Officer (XO), Department Heads, Division Officers.</li>\n                <li><strong>Why It Matters:</strong> Ensures orders are followed, responsibilities are met, and the mission is accomplished effectively.</li>\n            </ul>\n\n            <p><strong>Exam Focus:</strong> Be prepared to identify the chain of command in a given scenario. Understand the roles and responsibilities of key personnel within the chain.</p>\n        </div>\n    </div>\n\n    <div class="topic-section">\n        <h2 style="color: #28a745;">Naval Branches (Surface Warfare, Submarine Warfare, Aviation, etc.)</h2>\n        <div class="topic-content">\n            <p>The Navy comprises several branches, each specializing in different aspects of naval operations.</p>\n\n            <table class="branch-table" style="width: 100%; border-collapse: collapse; margin-top: 10px;">\n                <thead>\n                    <tr style="background-color: rgba(0, 123, 255, 0.1); color: #007bff;">\n                        <th style="padding: 8px; border: 1px solid #ddd; text-align: left;">Branch</th>\n                        <th style="padding: 8px; border: 1px solid #ddd; text-align: left;">Description</th>\n                        <th style="padding: 8px; border: 1px solid #ddd; text-align: left;">Key Responsibilities</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Surface Warfare</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Operates surface ships, conducts maritime security operations.</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Naval gunfire support, anti-surface warfare, maritime interdiction.</td>\n                    </tr>\n                    <tr>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Submarine Warfare</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Operates submarines, conducts underwater operations.</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Intelligence gathering, strategic deterrence, anti-submarine warfare.</td>\n                    </tr>\n                    <tr>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Aviation</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Operates aircraft, conducts air operations.</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Air superiority, strike warfare, reconnaissance.</td>\n                    </tr>\n                      <tr>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Special Warfare (SEALs)</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Conducts unconventional warfare and special operations.</td>\n                        <td style="padding: 8px; border: 1px solid #ddd;">Direct action, reconnaissance, counterterrorism.</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <p><strong>Exam Focus:</strong> Understand the primary roles and responsibilities of each branch.  Be able to differentiate between the branches and their operational environments.</p>\n        </div>\n    </div>\n\n    <div class="topic-section">\n        <h2 style="color: #28a745;">Major Naval Commands (e.g., Fleet Forces Command, Naval Sea Systems Command)</h2>\n        <div class="topic-content">\n            <p>Major Naval Commands are responsible for specific functions within the Navy, ensuring operational readiness and support.</p>\n\n            <ul style="list-style-type: square; margin-left: 20px;">\n                <li><strong>Fleet Forces Command (FFC):</strong>  Responsible for the readiness of naval forces in the Atlantic and Pacific Fleets.</li>\n                <li><strong>Naval Sea Systems Command (NAVSEA):</strong>  Responsible for the engineering and maintenance of naval ships and systems.</li>\n                <li><strong>Naval Air Systems Command (NAVAIR):</strong> Responsible for naval aviation programs.</li>\n                <li><strong>U.S. Pacific Fleet (PACFLT):</strong> Controls naval operations in the Pacific Ocean.</li>\n                <li><strong>U.S. Naval Forces Europe-Africa (NAVEUR-NAVAF):</strong>  Controls naval operations in Europe and Africa.</li>\n            </ul>\n\n            <p><strong>Exam Focus:</strong> Be able to match commands to their primary functions. Understand how these commands contribute to the overall mission of the Navy.</p>\n        </div>\n    </div>\n\n    <div class="topic-section">\n        <h2 style="color: #28a745;">Officer vs. Enlisted Ranks</h2>\n        <div class="topic-content">\n            <p>The Navy has two primary categories of personnel: Officers and Enlisted.  Each has different roles, responsibilities, and pathways for advancement.</p>\n\n            <div class="rank-comparison" style="display: flex; justify-content: space-around; margin-top: 10px;">\n                <div class="rank-box" style="background-color: rgba(76, 175, 80, 0.1); border: 1px solid rgba(76, 175, 80, 0.3); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); padding: 10px; text-align: center;">\n                    <h3 style="color: #4CAF50;">Officers</h3>\n                    <ul>\n                        <li>Commissioned officers, holding positions of authority and leadership.</li>\n                        <li>Typically require a bachelor\'s degree or higher.</li>\n                        <li>Responsible for planning, directing, and overseeing naval operations.</li>\n                    </ul>\n                </div>\n\n                <div class="rank-box" style="background-color: rgba(255, 87, 34, 0.1); border: 1px solid rgba(255, 87, 34, 0.3); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); padding: 10px; text-align: center;">\n                    <h3 style="color: #FF5722;">Enlisted</h3>\n                    <ul>\n                        <li>Carry out the day-to-day operations of the Navy.</li>\n                        <li>Require a high school diploma or equivalent.</li>\n                        <li>Specialized in various technical and operational fields.</li>\n                    </ul>\n                </div>\n            </div>\n\n            <p><strong>Exam Focus:</strong> Be familiar with the general rank structure for both officers and enlisted personnel. Understand the differences in responsibilities and career paths.</p>\n        </div>\n    </div>\n\n    <div class="topic-section">\n        <h2 style="color: #28a745;">Naval Bases and Installations</h2>\n        <div class="topic-content">\n            <p>Naval Bases and Installations provide essential support for naval operations, including training, maintenance, and logistics.</p>\n\n            <ul style="list-style-type: circle; margin-left: 20px;">\n                <li><strong>Examples:</strong> Naval Station Norfolk, Naval Base San Diego, Pearl Harbor.</li>\n                <li><strong>Functions:</strong>  Homeporting ships, training facilities, supply depots, maintenance centers.</li>\n                <li><strong>Importance:</strong> Strategic locations for projecting naval power and supporting global operations.</li>\n            </ul>\n\n            <p><strong>Exam Focus:</strong> Recognize the significance of naval bases and installations in supporting naval operations.  Be familiar with major naval bases and their geographical locations.</p>\n        </div>\n    </div>\n</div>\n\n<style>\n.chapter-container {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    padding: 20px;\n    background-color: #f8f9fa;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    margin: 20px auto;\n    max-width: 800px;\n}\n\n.topic-section {\n    margin-bottom: 20px;\n    padding: 15px;\n    border: 1px solid #dee2e6;\n    border-radius: 6px;\n    background-color: #fff;\n}\n\n.topic-content {\n    margin-top: 10px;\n}\n\n.example-box {\n    padding: 10px;\n    margin: 10px 0;\n    border-radius: 4px;\n}\n\n/* Responsive Design */\n@media (max-width: 600px) {\n    .chapter-container {\n        padding: 10px;\n    }\n    .rank-comparison {\n        flex-direction: column;\n    }\n    .rank-box {\n        margin-bottom: 10px;\n    }\n}\n</style>\n```',
        },
      ],
    },
  ],
});

export const GenerateFlashCards = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate the flashcard on topic : Flutter fundamentals, userinterface ui developement, basic app navigation in JSON format with front back content, maximum 15\n",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "front": "What is Flutter\'s primary UI building block?",\n    "back": "Widgets! Everything in Flutter is a widget, from buttons to layouts."\n  },\n  {\n    "front": "Explain the difference between StatelessWidget and StatefulWidget.",\n    "back": "StatelessWidget: Immutable, doesn\'t change its state. StatefulWidget: Mutable, can change its state and trigger UI updates."\n  },\n  {\n    "front": "What is the purpose of the `build()` method in a Flutter widget?",\n    "back": "The `build()` method describes the part of the user interface represented by this widget."\n  },\n  {\n    "front": "How do you declare a Text widget in Flutter?",\n    "back": "`Text(\'Hello, World!\')`"\n  },\n  {\n    "front": "Name three common layout widgets in Flutter.",\n    "back": "Row, Column, Container, Center, Padding"\n  },\n  {\n    "front": "What does the `SafeArea` widget do?",\n    "back": "Ensures the widget\'s content isn\'t obscured by the operating system interfaces (e.g., status bar, notch)."\n  },\n  {\n    "front": "How do you add padding around a widget?",\n    "back": "Using the `Padding` widget.  Example: `Padding(padding: EdgeInsets.all(8.0), child: childWidget)`"\n  },\n  {\n    "front": "What is the purpose of the `Scaffold` widget?",\n    "back": "Provides the basic visual structure for a material design app, including AppBar, body, floating action button, etc."\n  },\n  {\n    "front": "How do you change the theme of your Flutter app?",\n    "back": "Wrap your app with a `MaterialApp` widget and set the `theme` property using a `ThemeData` object."\n  },\n  {\n    "front": "What\'s the primary way to navigate between screens in Flutter?",\n    "back": "Using the `Navigator` widget.  `Navigator.push()` to push a new route onto the stack, `Navigator.pop()` to remove the top route."\n  },\n  {\n    "front": "Explain `Navigator.pushNamed()` and `Navigator.pop()` in the context of routing.",\n    "back": "`Navigator.pushNamed()`: navigates to a route based on a predefined name. `Navigator.pop()`: returns to the previous screen."\n  },\n    {\n    "front": "What is the function of the `AppBar` widget?",\n    "back": "Displays a toolbar at the top of the screen, often containing a title, actions, and a leading widget (like a back button)."\n  },\n  {\n    "front": "How do you define routes for named navigation?",\n    "back": "In the `MaterialApp`, use the `routes` property: `routes: {\'/\': (context) => HomeScreen(), \'/details\': (context) => DetailsScreen()}`"\n  },\n  {\n    "front": "What is a `Future` in Flutter?",\n    "back": "A `Future` represents a value that might not be available yet, but will be available at some point in the future (like the result of an asynchronous operation)."\n  },\n  {\n    "front": "What does the `Expanded` widget do?",\n    "back": "Makes a child of a Row or Column fill the available space."\n  }\n]\n```',
        },
      ],
    },
  ],
});

// this model is used to generate the quiz

export const GENERATE_QUIZ_AI_MODEL = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate quiz on topic : \",Post-War Britain: A Nation Scarred,Birmingham's Underworld: Gangs and Grime,The Shelby Family: Power, Ambition, and Trauma,The Women of 'Peaky Blinders': Agency and Resistance,Class, Politics, and the Rise of Extremism,'Peaky Blinders' and Historical Accuracy: Separating Fact from Fiction\",  with question and options along with correct answer in JSON format minimum 10 questions",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "question": "What was a significant socio-economic consequence of Post-War Britain that profoundly impacted cities like Birmingham?",\n    "options": [\n      "A surge in technological innovation leading to widespread prosperity.",\n      "Rationing, unemployment, and a housing crisis, contributing to social unrest.",\n      "Rapid expansion of the British Empire and increased international trade.",\n      "A decline in industrial production and a shift towards an agrarian economy."\n    ],\n    "answer": "Rationing, unemployment, and a housing crisis, contributing to social unrest."\n  },\n  {\n    "question": "Which of the following best describes the environment that fostered the growth of gangs in Birmingham\'s underworld after World War I?",\n    "options": [\n      "Strict law enforcement and social stability.",\n      "Economic prosperity and readily available opportunities for all.",\n      "A power vacuum created by returning veterans, economic hardship, and a lack of legitimate opportunity.",\n      "Government initiatives promoting community engagement and reducing crime."\n    ],\n    "answer": "A power vacuum created by returning veterans, economic hardship, and a lack of legitimate opportunity."\n  },\n  {\n    "question": "Which of the following is a recurring theme associated with the Shelby family in \'Peaky Blinders\'?",\n    "options": [\n      "Unwavering contentment and social acceptance.",\n      "The pursuit of pacifism and non-violence.",\n      "Power, ambition, and the psychological trauma caused by war and loss.",\n      "A commitment to upholding the law and working within the established system."\n    ],\n    "answer": "Power, ambition, and the psychological trauma caused by war and loss."\n  },\n  {\n    "question": "In \'Peaky Blinders,\' how do the female characters often demonstrate agency and resistance?",\n    "options": [\n      "By passively accepting their prescribed social roles.",\n      "By exclusively relying on male characters for protection and support.",\n      "By challenging societal expectations, participating in business, and exercising political influence.",\n      "By conforming to the restrictive norms of the time without complaint."\n    ],\n    "answer": "By challenging societal expectations, participating in business, and exercising political influence."\n  },\n  {\n    "question": "What political ideologies are seen to be rising or present within the narrative of \'Peaky Blinders\', reflecting the real political landscape of the time?",\n    "options": [\n      "Exclusively centrist and moderate political viewpoints.",\n      "Communism, Fascism, and various forms of extremism.",\n      "A widespread consensus in favour of the existing social and political order.",\n      "A rejection of political ideologies in favour of individual self-interest."\n    ],\n    "answer": "Communism, Fascism, and various forms of extremism."\n  },\n  {\n    "question": "Regarding historical accuracy, \'Peaky Blinders\' typically takes what approach?",\n    "options": [\n      "Strives for complete and unyielding historical fidelity in every detail.",\n      "Distorts historical events and figures for purely sensational effect.",\n      "Blends historical elements with fictional characters and narratives for dramatic purposes.",\n      "Presents a utopian vision of Post-War Britain, ignoring social problems."\n    ],\n    "answer": "Blends historical elements with fictional characters and narratives for dramatic purposes."\n  },\n  {\n    "question": "What specific historical event significantly contributes to the psychological struggles of the Shelby brothers, particularly Tommy?",\n    "options": [\n      "The Crimean War.",\n      "The American Civil War.",\n      "World War II.",\n      "World War I."\n    ],\n    "answer": "World War I."\n  },\n  {\n    "question": "The \'Peaky Blinders\' gang takes its name from what?",\n    "options": [\n      "A famous horse-racing syndicate.",\n      "The razor blades sewn into the peaks of their caps.",\n      "A fictional brand of alcohol.",\n      "A local political movement."\n    ],\n    "answer": "The razor blades sewn into the peaks of their caps."\n  },\n  {\n    "question": "Which female character consistently challenges Tommy Shelby\'s authority and demonstrates significant business acumen?",\n    "options": [\n      "Polly Gray.",\n      "Ada Shelby.",\n      "Grace Burgess.",\n      "Lizzie Stark."\n    ],\n    "answer": "Polly Gray."\n  },\n  {\n    "question": "Beyond street crime, what type of illicit activities does the Shelby family engage in that reflects the broader corruption of the era?",\n    "options": [\n      "Exclusively charitable work and community development.",\n      "Legal and transparent business dealings only.",\n      "Betting, extortion, smuggling, and political manipulation.",\n      "Focusing solely on agricultural pursuits."\n    ],\n    "answer": "Betting, extortion, smuggling, and political manipulation."\n  },\n  {\n    "question": "How does the show portray the class divisions and social mobility (or lack thereof) in Post-War Britain?",\n    "options": [\n      "By showing a society with equal opportunities for all, regardless of background.",\n      "By ignoring class issues entirely.",\n      "By depicting the stark contrasts between the working class and the upper class, and the difficulties faced by those trying to climb the social ladder.",\n      "By suggesting that everyone in Britain belonged to the middle class."\n    ],\n    "answer": "By depicting the stark contrasts between the working class and the upper class, and the difficulties faced by those trying to climb the social ladder."\n  }\n]\n```',
        },
      ],
    },
  ],
});
