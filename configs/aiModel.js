const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutlineAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "generate a study material for python for exam and level of difficulty will be easy with summary of course,list of chapters along with summary for each chapter,topic list in each chapter , all result in JSON format\n",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "Introduction to Python Programming",\n  "course_summary": "This course provides a beginner-friendly introduction to Python programming. It covers fundamental concepts like data types, control flow, functions, and basic data structures. The focus is on building a solid foundation for further Python learning and application.",\n  "difficulty_level": "Easy",\n  "chapters": [\n    {\n      "chapter_number": 1,\n      "chapter_title": "Getting Started with Python",\n      "chapter_summary": "This chapter introduces you to Python, explains why it\'s popular, and guides you through setting up your Python environment. You\'ll learn how to write and execute your first Python program.",\n      "topics": [\n        "What is Python?",\n        "Why Python is popular",\n        "Setting up Python (Installation)",\n        "Running Python code",\n         "Basic Syntax (Comments)",\n          "First Python Program (\'Hello, World!\')"\n       ]\n    },\n    {\n      "chapter_number": 2,\n      "chapter_title": "Variables and Data Types",\n      "chapter_summary": "Learn about variables, how to store information in them, and the fundamental data types in Python, such as integers, floats, strings, and booleans. You\'ll also explore type conversion.",\n       "topics": [\n        "Variables: Defining and naming",\n        "Data types: Integer, Float, String, Boolean",\n        "Type conversion (casting)",\n        "Basic Input/Output (using print() and input())"\n      ]\n    },\n     {\n      "chapter_number": 3,\n      "chapter_title": "Operators in Python",\n      "chapter_summary": "This chapter covers the various operators used in Python, including arithmetic, comparison, and logical operators. Understanding operators is crucial for performing computations and making decisions in your code.",\n       "topics": [\n        "Arithmetic operators (+, -, *, /, %, //, **)",\n        "Assignment operators (=, +=, -=, *=, /=)",\n        "Comparison operators (==, !=, >, <, >=, <=)",\n        "Logical operators (and, or, not)"\n        ]\n      },\n    {\n      "chapter_number": 4,\n       "chapter_title": "Control Flow: Conditional Statements",\n      "chapter_summary": "This chapter introduces conditional statements (`if`, `elif`, `else`) to control the flow of execution based on different conditions. You\'ll learn how to make your programs respond differently to different inputs.",\n      "topics":[\n          "if statement",\n          "if-else statement",\n          "if-elif-else statement",\n          "Nested if statements"\n        ]\n    },\n      {\n      "chapter_number": 5,\n      "chapter_title": "Control Flow: Loops",\n       "chapter_summary":"Learn how to repeat blocks of code using `for` and `while` loops. You\'ll learn to iterate over sequences and execute code based on conditions. We will also explore break and continue statments",\n      "topics": [\n        "for loop",\n        "while loop",\n        "Loop control statements (break, continue)",\n        "Looping through strings and lists (basic introduction)"\n      ]\n    },\n       {\n      "chapter_number": 6,\n      "chapter_title": "Introduction to Lists",\n       "chapter_summary":"This chapter introduces you to lists. You will learn how to create, access, modify and iterate through them.",\n      "topics": [\n         "Creating a list",\n         "Accessing list elements",\n         "Modifying lists",\n         "List slicing",\n          "Basic list operations (append, insert, remove, len)"\n        ]\n      },\n    {\n       "chapter_number": 7,\n       "chapter_title": "Defining and Calling Functions",\n       "chapter_summary": "This chapter introduces the concept of functions to modularize code. You\'ll learn how to define functions, pass arguments, and return values. Understanding functions helps in writing reusable and organized code.",\n       "topics": [\n            "Defining functions (def keyword)",\n            "Function parameters and arguments",\n            "Returning values from functions",\n             "Calling a function",\n            "Introduction to scope"\n\n         ]\n    }\n\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});

export const notesGenAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate exam material detail content for each chapter, Make sure to include all topic point in the content, make sure to give content in HTML format, do not add (HTML,HEAD,BODY TITLE tag) the chapters : "chapter_title": "Arrays and Strings",\n      "chapter_summary": "This chapter reviews basic array and string manipulations, focusing on techniques relevant to interview questions. It also introduces important concepts like time and space complexity analysis.",\n      "topics": [\n        "Array basics and operations",\n        "String manipulation techniques",\n        "Two-pointer technique",\n        "Sliding window technique",\n        "Time and space complexity analysis",\n        "Common array problems",\n        "Common string problems"',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n<div>\n  <h2>Chapter: Arrays and Strings</h2>\n  <p><strong>Summary:</strong> This chapter reviews basic array and string manipulations, focusing on techniques relevant to interview questions. It also introduces important concepts like time and space complexity analysis.</p>\n\n  <h3>Topics:</h3>\n\n  <div class="topic">\n      <h4>1. Array Basics and Operations</h4>\n        <ul>\n            <li><strong>Array Declaration and Initialization:</strong>\n               <ul>\n                   <li>Declaring arrays of different data types (integers, characters, objects, etc.).</li>\n                   <li>Initializing arrays with specific values or default values.</li>\n                    <li>Multi-dimensional arrays (2D, 3D, etc.) declaration and usage.</li>\n               </ul>\n            </li>\n            <li><strong>Accessing Array Elements:</strong>\n                <ul>\n                    <li>Using index notation to access array elements (e.g., `arr[i]`).</li>\n                    <li>Handling array out-of-bounds errors.</li>\n                </ul>\n            </li>\n            <li><strong>Array Insertion and Deletion:</strong>\n                <ul>\n                    <li>Inserting elements at the beginning, middle, and end of arrays.</li>\n                    <li>Deleting elements from specific positions in arrays.</li>\n                    <li>Understanding the time complexity implications of insert and delete operations, especially for contiguous array.</li>\n                </ul>\n            </li>\n             <li><strong>Array Traversal and Iteration:</strong>\n                <ul>\n                    <li>Iterating through arrays using `for` loops, `while` loops, and enhanced loops.</li>\n                    <li>Understanding the concept of array length and bounds.</li>\n                     <li>Iterating through multidimensional arrays.</li>\n                </ul>\n            </li>\n            <li><strong>Common Array Operations:</strong>\n                <ul>\n                    <li>Finding the minimum and maximum element in an array.</li>\n                    <li>Calculating the sum and average of array elements.</li>\n                    <li>Searching for an element in an array (linear search).</li>\n                    <li>Reversing an array.</li>\n                    <li>Sorting an array.</li>\n                </ul>\n            </li>\n        </ul>\n  </div>\n\n  <div class="topic">\n      <h4>2. String Manipulation Techniques</h4>\n        <ul>\n            <li><strong>String Basics and Immutability:</strong>\n                <ul>\n                    <li>Understanding string as a sequence of characters.</li>\n                    <li>Understanding that most string implementations are immutable.</li>\n                    <li>Creating strings from literal values.</li>\n                </ul>\n            </li>\n             <li><strong>String Length and Accessing Characters:</strong>\n                <ul>\n                    <li>Getting the length of a string.</li>\n                    <li>Accessing individual characters using index.</li>\n                    <li>String out of range handling.</li>\n                </ul>\n            </li>\n            <li><strong>String Concatenation and Substrings:</strong>\n                <ul>\n                     <li>Concatenating strings using the `+` operator or `concat()` function.</li>\n                     <li>Extracting substrings using slicing/substring methods.</li>\n                    <li>String Interpolation.</li>\n                </ul>\n            </li>\n            <li><strong>String Comparison:</strong>\n                 <ul>\n                     <li>Comparing strings for equality and ordering.</li>\n                     <li>Case sensitive and case-insensitive string comparison.</li>\n                     <li>Lexicographical order.</li>\n                 </ul>\n            </li>\n            <li><strong>String Search and Manipulation Methods:</strong>\n               <ul>\n                   <li>Searching for a substring within a string.</li>\n                   <li>Replacing substrings within a string.</li>\n                   <li>Splitting strings into substrings based on delimiters.</li>\n                   <li>Converting strings to upper/lower case.</li>\n                   <li>Trimming whitespace from strings.</li>\n               </ul>\n           </li>\n             <li><strong>String Builders:</strong>\n               <ul>\n                 <li>Understanding the importance of String Builder/Buffer in mutable operation of string for performance optimization.</li>\n                 <li>Common operations of string builders/buffers like `append`, `insert`, `delete`.</li>\n               </ul>\n           </li>\n        </ul>\n    </div>\n\n  <div class="topic">\n      <h4>3. Two-Pointer Technique</h4>\n       <ul>\n           <li><strong>Concept and Usage:</strong>\n                <ul>\n                   <li>Understanding the basic concept of two-pointer approach (using two pointers to iterate or manipulate an array or string).</li>\n                   <li>Applying two-pointer techniques on sorted array and unsorted array based problems.</li>\n                    <li>Understanding the scenarios when it is effective.</li>\n                </ul>\n           </li>\n           <li><strong>Common Patterns:</strong>\n               <ul>\n                    <li>Using two pointers moving in the same direction to solve problems (e.g., finding pairs with a certain sum).</li>\n                    <li>Using two pointers moving in opposite directions (e.g., reversing an array/string, palindrome detection).</li>\n                    <li>Using a slow and fast pointer approach (e.g., finding cycles in a list, duplicate removal).</li>\n                </ul>\n            </li>\n           <li><strong>Examples and Applications:</strong>\n                <ul>\n                    <li>Pair sum problems in sorted arrays.</li>\n                    <li>Finding palindromes in strings.</li>\n                    <li>Merging sorted arrays.</li>\n                    <li>Removing duplicates from arrays.</li>\n                    <li>Solving problems with space optimization using two pointers.</li>\n                </ul>\n            </li>\n        </ul>\n  </div>\n\n  <div class="topic">\n       <h4>4. Sliding Window Technique</h4>\n        <ul>\n           <li><strong>Concept and Usage:</strong>\n                <ul>\n                    <li>Understanding the sliding window technique (using a window of a certain size that slides through an array or string).</li>\n                     <li>Identifying when to apply sliding window based problems, including fixed size and dynamic size window.</li>\n                 </ul>\n            </li>\n           <li><strong>Window Size and Movement:</strong>\n                <ul>\n                    <li>Managing the window size (fixed or variable).</li>\n                     <li>How to adjust the window boundaries (expanding or shrinking) based on problem requirements.</li>\n                    <li>Using sliding window to achieve O(n) solutions.</li>\n                </ul>\n            </li>\n            <li><strong>Applications:</strong>\n                <ul>\n                    <li>Finding maximum/minimum sum/average in a subarray of a specific size.</li>\n                    <li>Finding occurrences of a substring in a string.</li>\n                    <li>Finding longest substring with at most k distinct characters.</li>\n                     <li>Solving anagram problems with sliding window.</li>\n                 </ul>\n            </li>\n        </ul>\n   </div>\n\n    <div class="topic">\n      <h4>5. Time and Space Complexity Analysis</h4>\n       <ul>\n           <li><strong>Big O Notation:</strong>\n               <ul>\n                   <li>Understanding the purpose of Big O notation for algorithm analysis.</li>\n                   <li>Common time complexities (O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n), O(n!)).</li>\n                   <li>Common space complexities (O(1), O(n), O(n^2)).</li>\n                   <li>Calculating time and space complexity of code snippets.</li>\n               </ul>\n           </li>\n           <li><strong>Analyzing Loops and Recursion:</strong>\n               <ul>\n                   <li>How loops affect time complexity (nested loops).</li>\n                   <li>How recursion affects time and space complexity.</li>\n                   <li>Using amortized analysis for the average cost of operations.</li>\n               </ul>\n           </li>\n          <li><strong>Tradeoffs between Time and Space:</strong>\n                <ul>\n                     <li>Understanding when to prefer time efficiency over space and vice versa.</li>\n                     <li>Analyzing algorithm to optimize time and space complexity.</li>\n                </ul>\n            </li>\n        </ul>\n  </div>\n\n   <div class="topic">\n      <h4>6. Common Array Problems</h4>\n      <ul>\n          <li><strong>Problems involving searching:</strong>\n              <ul>\n                <li>Linear search, binary search(including sorted rotated array).</li>\n                <li>Finding duplicates in an array.</li>\n                 <li>Finding missing numbers in an array.</li>\n              </ul>\n          </li>\n           <li><strong>Problems involving manipulation:</strong>\n              <ul>\n                  <li>Reversing an array.</li>\n                  <li>Rotating an array.</li>\n                  <li>Sorting an array (bubble sort, insertion sort, merge sort).</li>\n              </ul>\n          </li>\n          <li><strong>Problems with specific constraints:</strong>\n              <ul>\n                   <li>Finding maximum/minimum elements in an array.</li>\n                    <li>Finding the sum of all elements, specific pairs.</li>\n                   <li>Finding leader or majority elements.</li>\n                   <li>Finding k smallest/largest elements.</li>\n                </ul>\n            </li>\n        </ul>\n  </div>\n\n  <div class="topic">\n      <h4>7. Common String Problems</h4>\n        <ul>\n            <li><strong>String Manipulation Problems:</strong>\n                <ul>\n                    <li>Reversing a string.</li>\n                    <li>Checking if a string is a palindrome.</li>\n                    <li>String Compression.</li>\n                     <li>Anagrams.</li>\n                </ul>\n            </li>\n            <li><strong>Searching and Pattern Matching:</strong>\n                <ul>\n                    <li>Finding substring within string.</li>\n                    <li>Longest common substring.</li>\n                    <li>String matching algorithms.</li>\n                </ul>\n            </li>\n             <li><strong>String Conversion and Encoding:</strong>\n                <ul>\n                   <li>String to integer conversion.</li>\n                    <li>Roman to integer conversion.</li>\n                   <li>Basic Encoding and decoding problems.</li>\n                </ul>\n           </li>\n          <li><strong>Problems involving special characters and formatting:</strong>\n              <ul>\n                <li>Whitespace removal.</li>\n                <li>String validation problems.</li>\n                <li>Formatting a string.</li>\n              </ul>\n          </li>\n        </ul>\n    </div>\n</div>\n```\n',
        },
      ],
    },
  ],
});


